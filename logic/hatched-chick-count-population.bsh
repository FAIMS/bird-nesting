/*********************** HATCHED CHICK COUNT POPULATION ***********************/
addOnEvent("Nest_Measurement/Nest_Measurement/Take_Current_Chick_Counts", "click", "populateHatchedChickCount()");

populateHatchedChickCount() {
  String nestMeasurementUuid = getUuid("Nest_Measurement");
  if (isNull(nestMeasurementUuid)) {
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }

  String refLive = "Nest_Measurement/Nest_Measurement/Hatched_Chick_Count_Live";
  String refDead = "Nest_Measurement/Nest_Measurement/Hatched_Chick_Count_Dead";

  // Produce queries
  Boolean isLive;
  isLive = true;  qLive = getHatchedChickCountQuery(isLive, nestMeasurementUuid);
  isLive = false; qDead = getHatchedChickCountQuery(isLive, nestMeasurementUuid);

  // Set up callbacks
  FetchCallback populateLive = new FetchCallback() {
    onFetch(result) {
      String count = result.get(0).get(0);
      setFieldValue(refLive, count);
    }
  };
  FetchCallback populateDead = new FetchCallback() {
    onFetch(result) {
      String count = result.get(0).get(0);
      setFieldValue(refDead, count);
    }
  };

  // Fetch
  fetchAll(qLive, populateLive);
  fetchAll(qDead, populateDead);
}

getHatchedChickCountQuery(Boolean isLive, nestMeasurementUuid) {
  String chickAliveVocabName = "";
  if (isLive) chickAliveVocabName = "{Yes}";
  else        chickAliveVocabName = "{No}";

  String q = "";
  q += " SELECT COUNT(uuid)";
  q += "   FROM latestnondeletedaentvalue";
  q += "   JOIN attributekey USING (attributeid)";
  q += "   JOIN vocabulary USING (vocabid)";
  q += "  WHERE vocabname = '{chickAliveVocabName}'";
  q += "    AND uuid IN (";
  q += " SELECT childuuid";
  q += "                   FROM parentchild JOIN latestnondeletedarchent on (uuid = childuuid)";
  q += "                  WHERE childaenttypename = 'Chick Measurement'";
  q += "                    AND parentuuid IN (SELECT childuuid";
  q += "                                         FROM parentchild";
  q += "                                        WHERE childaenttypename = 'Chick'";
  q += "                                          AND parentuuid in (select parentuuid";
  q += "                                                                  from parentchild";
  q += "                                                              where childuuid = '{nestMeasurementUuid}'";
  q += "                                                                and parentaenttypename = 'Nest'))";
  q += " ";
  q += "     GROUP BY parentuuid";
  q += "     HAVING   aenttimestamp = max(aenttimestamp))";
  q  = replaceFirst(q, "{chickAliveVocabName}", chickAliveVocabName);
  q  = replaceFirst(q, "{nestMeasurementUuid}", nestMeasurementUuid);

  return q;
}
